package java.lang;

import java.lang.annotation.Native;
import java.util.Objects;
import jdk.internal.HotSpotIntrinsicCandidate;
import jdk.internal.misc.VM;

import static java.lang.String.COMPACT_STRINGS;
import static java.lang.String.LATIN1;
import static java.lang.String.UTF16;

/*
1、Integer类不能被继承——final
2、Integer类实现了Comparable接口，所以可以用compareTo进行比较并且Integer对象只能和Integer类型的对象进行比较，
不能和其他类型比较（至少调用compareTo方法无法比较）。
3、Integer继承了Number类，所以该类可以调用longValue、floatValue、doubleValue等系列方法返回对应的类型的值。
 */
public final class Integer extends Number implements Comparable<Integer> {
    /**
     * 最小值-2147483648
     */
    @Native public static final int   MIN_VALUE = 0x80000000;

    /**
     * 最大值2147483647
     */
    @Native public static final int   MAX_VALUE = 0x7fffffff;

    /**
     * 自动装箱操作
     */
    @SuppressWarnings("unchecked")
    public static final Class<Integer>  TYPE = (Class<Integer>) Class.getPrimitiveClass("int");

    /**
     *用于表示一个数字作为一个字符串的所有可能的字符
     */
    static final char[] digits = {
        '0' , '1' , '2' , '3' , '4' , '5' ,
        '6' , '7' , '8' , '9' , 'a' , 'b' ,
        'c' , 'd' , 'e' , 'f' , 'g' , 'h' ,
        'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,
        'o' , 'p' , 'q' , 'r' , 's' , 't' ,
        'u' , 'v' , 'w' , 'x' , 'y' , 'z'
    };

    /**
     * 返回字符串的进制表示
		参数 i为数值radix为多少进制
     */
    public static String toString(int i, int radix) {
		//Character.MIN_RADIX=2 最小进制数 Character.MAX_RADIX=36最大进制数
		//不在范围内直接返回十进制
        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
            radix = 10;

        /* 使用更快的版本 */
        if (radix == 10) {
            return toString(i);
        }
		
        if (COMPACT_STRINGS) {
            byte[] buf = new byte[33];
            boolean negative = (i < 0);
            int charPos = 32;
			//如果为正数就转为负数因为负数位比正数位多一个数
            if (!negative) {
                i = -i;
            }
			//转radix的进制
            while (i <= -radix) {
                buf[charPos--] = (byte)digits[-(i % radix)];
                i = i / radix;
            }
            buf[charPos] = (byte)digits[-i];
			//如果为负数前面加一个负号
            if (negative) {
                buf[--charPos] = '-';
            }

            return StringLatin1.newString(buf, charPos, (33 - charPos));
        }
        return toStringUTF16(i, radix);
    }
	//私有转UTF-16的编码
    private static String toStringUTF16(int i, int radix) {
        byte[] buf = new byte[33 * 2];
        boolean negative = (i < 0);
        int charPos = 32;
        if (!negative) {
            i = -i;
        }
        while (i <= -radix) {
            StringUTF16.putChar(buf, charPos--, digits[-(i % radix)]);
            i = i / radix;
        }
        StringUTF16.putChar(buf, charPos, digits[-i]);

        if (negative) {
            StringUTF16.putChar(buf, --charPos, '-');
        }
        return StringUTF16.newString(buf, charPos, (33 - charPos));
    }

    /**
     * 返回一个无符号的进制字符串
     */
    public static String toUnsignedString(int i, int radix) {
        return Long.toUnsignedString(toUnsignedLong(i), radix);
    }

    /**
     转为无符号16进制数的字符串
     */
    public static String toHexString(int i) {
		//传的4为2的4次方即为16进制数
        return toUnsignedString0(i, 4);
    }

    /**
     *转为无符号8进制数的字符串
     */
    public static String toOctalString(int i) {
		//传的3为2的3次方即为8进制数
        return toUnsignedString0(i, 3);
    }

    /**
     * 转为无符号2进制数的字符串
     */
    public static String toBinaryString(int i) {
		//传的1为2的1次方即为2进制数
        return toUnsignedString0(i, 1);
    }

    /**
     * 将整数转换为无符号数字，
	 * val为数值 shift是移多少位的进制数。
     */
    private static String toUnsignedString0(int val, int shift) {
        // 断言 shift> 0 && shift<= 5：“非法移位值”;
		//判断值需要占多少个位置
        int mag = Integer.SIZE - Integer.numberOfLeadingZeros(val);
        int chars = Math.max(((mag + (shift - 1)) / shift), 1);
        if (COMPACT_STRINGS) {
			//开多少的空间
            byte[] buf = new byte[chars];
			//使buf数组存储对应的字符
            formatUnsignedInt(val, shift, buf, 0, chars);
			//返回buf字符数组对应的字符串
            return new String(buf, LATIN1);
        } else {
			//如果为UTF-16 扩大两倍
            byte[] buf = new byte[chars * 2];
            formatUnsignedIntUTF16(val, shift, buf, 0, chars);
            return new String(buf, UTF16);
        }
    }

    /**
     * 将一个int格式（视为无符号）格式化为字符缓冲区
     */
    static void formatUnsignedInt(int val, int shift, char[] buf, int offset, int len) {
        // assert shift > 0 && shift <=5 : "Illegal shift value";
        // assert offset >= 0 && offset < buf.length : "illegal offset";
        // assert len > 0 && (offset + len) <= buf.length : "illegal length";
		//最大边界
        int charPos = offset + len;
		//左移扩大
        int radix = 1 << shift;
        int mask = radix - 1;
        do {
			//存储对应字符
            buf[--charPos] = Integer.digits[val & mask];
            val >>>= shift;
        } while (charPos > offset);
    }

    /** byte[]/ 的LATIN1 版本    */
    static void formatUnsignedInt(int val, int shift, byte[] buf, int offset, int len) {
        //最大边界
		int charPos = offset + len;
		//左移扩大
        int radix = 1 << shift;
        int mask = radix - 1;
        do {
			//存储对应字符
            buf[--charPos] = (byte)Integer.digits[val & mask];
            val >>>= shift;
        } while (charPos > offset);
    }

    /** byte[]/UTF16 版本 同上    */
    private static void formatUnsignedIntUTF16(int val, int shift, byte[] buf, int offset, int len) {
        int charPos = offset + len;
        int radix = 1 << shift;
        int mask = radix - 1;
        do {
            StringUTF16.putChar(buf, --charPos, Integer.digits[val & mask]);
            val >>>= shift;
        } while (charPos > offset);
    }

    static final byte[] DigitTens = {
        '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
        '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
        '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
        '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',
        '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',
        '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',
        '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',
        '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',
        '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',
        '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',
        } ;

    static final byte[] DigitOnes = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        } ;


    /**
     *返回一个数的十进制的字符串
     */
    @HotSpotIntrinsicCandidate
    public static String toString(int i) {
		//十进制字符串长度
        int size = stringSize(i);
        if (COMPACT_STRINGS) {
            byte[] buf = new byte[size];
            getChars(i, size, buf);
            return new String(buf, LATIN1);
        } else {
            byte[] buf = new byte[size * 2];
            StringUTF16.getChars(i, size, buf);
            return new String(buf, UTF16);
        }
    }

    /**
     *返回无符号的字符串表示
     */
    public static String toUnsignedString(int i) {
		//调Long中的字符转换
        return Long.toString(toUnsignedLong(i));
    }

    /**
     * 表示整数i的字符放入
     *字符数组buf。 字符被放入缓冲区向后以最低有效位开始位于指定索引（独占）的数字，并正在工作
     */
    static int getChars(int i, int index, byte[] buf) {
        int q, r;
        int charPos = index;

        boolean negative = i < 0;
        if (!negative) {
            i = -i;
        }

        // 每次迭代生成两位数字
        while (i <= -100) {
            q = i / 100;
            r = (q * 100) - i;
            i = q;
            buf[--charPos] = DigitOnes[r];
            buf[--charPos] = DigitTens[r];
        }

        // 我们知道此时最多只剩下两位数字。
        q = i / 10;
        r = (q * 10) - i;
        buf[--charPos] = (byte)('0' + r);

        // 余下的数字剩下什么。
        if (q < 0) {
            buf[--charPos] = (byte)('0' - q);
        }

        if (negative) {
            buf[--charPos] = (byte)'-';
        }
        return charPos;
    }

    //出于兼容性原因留在这里，请参阅JDK-8143900。
    static final int [] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999,
                                      99999999, 999999999, Integer.MAX_VALUE };

    /**
     *返回数值的有多少位数
	 最多为11加符号
     */
    static int stringSize(int x) {
        int d = 1;
        if (x >= 0) {
            d = 0;
            x = -x;
        }
        int p = -10;
        for (int i = 1; i < 10; i++) {
            if (x > p)
                return i + d;
            p = 10 * p;
        }
        return 10 + d;
    }

   /**
    *将字符串参数解析为基数中的有符号整数
    *由第二个参数指定。字符串中的字符
	*s字符串radix进制数
	*/
    public static int parseInt(String s, int radix)
                throws NumberFormatException
    {
        /*
         *警告：这个方法可能在虚拟机初始化时被提前调用
         *在IntegerCache初始化之前。 必须小心不要使用
         * valueOf方法。
         */
		//为空或者不在int的范围内抛异常。
        if (s == null) {
            throw new NumberFormatException("null");
        }
		//如果radix比Character表示的最小的小抛异常
        if (radix < Character.MIN_RADIX) {
            throw new NumberFormatException("radix " + radix +
                                            " less than Character.MIN_RADIX");
        }
		//如果radix比Character表示的最大的大抛异常
        if (radix > Character.MAX_RADIX) {
            throw new NumberFormatException("radix " + radix +
                                            " greater than Character.MAX_RADIX");
        }

        boolean negative = false;
        int i = 0, len = s.length();
        int limit = -Integer.MAX_VALUE;

        if (len > 0) {
            char firstChar = s.charAt(0);
            if (firstChar < '0') { // 可能的前导 "+" or "-"
                if (firstChar == '-') {
                    negative = true;
                    limit = Integer.MIN_VALUE;
                } else if (firstChar != '+') {
                    throw NumberFormatException.forInputString(s);
                }

                if (len == 1) { // 可能的前导 "+" or "-"
                    throw NumberFormatException.forInputString(s);
                }
                i++;
            }
			//空间位数
            int multmin = limit / radix;
            int result = 0;
            while (i < len) {
				//返回字符对应的数字
                int digit = Character.digit(s.charAt(i++), radix);
                if (digit < 0 || result < multmin) {
                    throw NumberFormatException.forInputString(s);
                }
                result *= radix;
                if (result < limit + digit) {
                    throw NumberFormatException.forInputString(s);
                }
                result -= digit;
            }
            return negative ? result : -result;
        } else {
            throw NumberFormatException.forInputString(s);
        }
    }

    /**
     * 作用同上，内部逻辑相似
     */
    public static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix)
                throws NumberFormatException {
        s = Objects.requireNonNull(s);

        if (beginIndex < 0 || beginIndex > endIndex || endIndex > s.length()) {
            throw new IndexOutOfBoundsException();
        }
        if (radix < Character.MIN_RADIX) {
            throw new NumberFormatException("radix " + radix +
                                            " less than Character.MIN_RADIX");
        }
        if (radix > Character.MAX_RADIX) {
            throw new NumberFormatException("radix " + radix +
                                            " greater than Character.MAX_RADIX");
        }

        boolean negative = false;
        int i = beginIndex;
        int limit = -Integer.MAX_VALUE;

        if (i < endIndex) {
            char firstChar = s.charAt(i);
            if (firstChar < '0') { // Possible leading "+" or "-"
                if (firstChar == '-') {
                    negative = true;
                    limit = Integer.MIN_VALUE;
                } else if (firstChar != '+') {
                    throw NumberFormatException.forCharSequence(s, beginIndex,
                            endIndex, i);
                }
                i++;
                if (i == endIndex) { // Cannot have lone "+" or "-"
                    throw NumberFormatException.forCharSequence(s, beginIndex,
                            endIndex, i);
                }
            }
            int multmin = limit / radix;
            int result = 0;
            while (i < endIndex) {
                // Accumulating negatively avoids surprises near MAX_VALUE
                int digit = Character.digit(s.charAt(i), radix);
                if (digit < 0 || result < multmin) {
                    throw NumberFormatException.forCharSequence(s, beginIndex,
                            endIndex, i);
                }
                result *= radix;
                if (result < limit + digit) {
                    throw NumberFormatException.forCharSequence(s, beginIndex,
                            endIndex, i);
                }
                i++;
                result -= digit;
            }
            return negative ? result : -result;
        } else {
            throw NumberFormatException.forInputString("");
        }
    }

    /**
     * 十进制字符串转数字
     */
    public static int parseInt(String s) throws NumberFormatException {
        return parseInt(s,10);
    }

    /**
     *无符号的字符串转进制
     */
    public static int parseUnsignedInt(String s, int radix)
                throws NumberFormatException {
        if (s == null)  {
            throw new NumberFormatException("null");
        }

        int len = s.length();
        if (len > 0) {
            char firstChar = s.charAt(0);
            if (firstChar == '-') {
                throw new
                    NumberFormatException(String.format("Illegal leading minus sign " +
                                                       "on unsigned string %s.", s));
            } else {
                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits
                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits
					//调用上面方法
                    return parseInt(s, radix);
                } else {
                    long ell = Long.parseLong(s, radix);
                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {
                        return (int) ell;
                    } else {
                        throw new
                            NumberFormatException(String.format("String value %s exceeds " +
                                                                "range of unsigned int.", s));
                    }
                }
            }
        } else {
            throw NumberFormatException.forInputString(s);
        }
    }

    /*
	*无符号的字符串转进制数
     */
    public static int parseUnsignedInt(CharSequence s, int beginIndex, int endIndex, int radix)
                throws NumberFormatException {
        s = Objects.requireNonNull(s);

        if (beginIndex < 0 || beginIndex > endIndex || endIndex > s.length()) {
            throw new IndexOutOfBoundsException();
        }
        int start = beginIndex, len = endIndex - beginIndex;

        if (len > 0) {
            char firstChar = s.charAt(start);
            if (firstChar == '-') {
                throw new
                    NumberFormatException(String.format("Illegal leading minus sign " +
                                                       "on unsigned string %s.", s));
            } else {
                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits
                        (radix == 10 && len <= 9)) { // Integer.MAX_VALUE in base 10 is 10 digits
                    return parseInt(s, start, start + len, radix);
                } else {
                    long ell = Long.parseLong(s, start, start + len, radix);
                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {
                        return (int) ell;
                    } else {
                        throw new
                            NumberFormatException(String.format("String value %s exceeds " +
                                                                "range of unsigned int.", s));
                    }
                }
            }
        } else {
            throw new NumberFormatException("");
        }
    }

    /**
     * 无符号十进制字符串转数字
     * @since 1.8
     */
    public static int parseUnsignedInt(String s) throws NumberFormatException {
        return parseUnsignedInt(s, 10);
    }

    /**
     * 返回保存该值的代码
     返回s对应的ValueOf,进制数为radix
     */
    public static Integer valueOf(String s, int radix) throws NumberFormatException {
        return Integer.valueOf(parseInt(s,radix));
    }

    /**
     *字符串转十进制。
     */
    public static Integer valueOf(String s) throws NumberFormatException {
        return Integer.valueOf(parseInt(s, 10));
    }

    /**
     * 缓存以支持自动装箱的对象身份语义
     *根据JLS要求，-128和127（含）。
     *常量池
     */
    private static class IntegerCache {
        static final int low = -128;
        static final int high;
        static final Integer cache[];

        static {
            // high value may be configured by property
            int h = 127;
            String integerCacheHighPropValue =
                VM.getSavedProperty("java.lang.Integer.IntegerCache.high");
            if (integerCacheHighPropValue != null) {
                try {
                    int i = parseInt(integerCacheHighPropValue);
                    i = Math.max(i, 127);
                    // Maximum array size is Integer.MAX_VALUE
                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
                } catch( NumberFormatException nfe) {
                    // If the property cannot be parsed into an int, ignore it.
                }
            }
            high = h;

            cache = new Integer[(high - low) + 1];
            int j = low;
            for(int k = 0; k < cache.length; k++)
                cache[k] = new Integer(j++);

            // range [-128, 127] must be interned (JLS7 5.1.7)
            assert IntegerCache.high >= 127;
        }

        private IntegerCache() {}
    }

    /**
     *返回一个代表指定的代码
     *如果新的实例不是
     *要求，这种方法通常应该优先使用
     */
    @HotSpotIntrinsicCandidate
    public static Integer valueOf(int i) {
        if (i >= IntegerCache.low && i <= IntegerCache.high)
            return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
    }

    /**
     *不能继承不能变
     *
     * @serial
     */
    private final int value;

   /*
	*构造一个新分配的{@code Integer}对象
    *表示指定的值。
    * @参数值的值代表的值
    *整数对象。
    * @deprecated
    *使用这个构造函数很少合适。 静态的工厂
    * {@link #valueOf（int）}通常是更好的选择，因为它是
    *可能会产生更好的空间和时间表现。
    */
    @Deprecated(since="9")
    public Integer(int value) {
        this.value = value;
    }

    /**
     *s的字符，十进制数.
     */
    @Deprecated(since="9")
    public Integer(String s) throws NumberFormatException {
        this.value = parseInt(s, 10);
    }

    
     /*返回这个{@code Integer}的值作为一个{bytecode}
      *缩小原始转换后,byte
	  */
    public byte byteValue() {
        return (byte)value;
    }

    /**
     *转换为short的数
     */
    public short shortValue() {
        return (short)value;
    }

    /**
     * 返回int型数
     */
    @HotSpotIntrinsicCandidate
    public int intValue() {
        return value;
    }

    /**
     * 返回一个long型数
     */
    public long longValue() {
        return (long)value;
    }

    /**
     * 返回float型
     */
    public float floatValue() {
        return (float)value;
    }

    /**
     * 返回double型
     */
    public double doubleValue() {
        return (double)value;
    }

    /**
     * 默认转成10进制
     */
    public String toString() {
        return toString(value);
    }

    /**
     *返回hash编码值
     */
    @Override
    public int hashCode() {
        return Integer.hashCode(value);
    }

    /**
     * 
	 *返回hash编码值.
     */
    public static int hashCode(int value) {
        return value;
    }

    /**
     * 进行equals的比较，只比较值不比较内容。
     */
    public boolean equals(Object obj) {
        if (obj instanceof Integer) {
            return value == ((Integer)obj).intValue();
        }
        return false;
    }

    /**
     *参数：nm为属性名，
     *val为int型默认值。
     *返回值：返回属性的Integer值。
     */
    public static Integer getInteger(String nm) {
		//调用getInteger(nm,null);方法
        return getInteger(nm, null);
    }

    /**
     *参数：nm为属性名，
     *val为int型默认值。
     *返回值：返回属性的Integer值。
     */
    public static Integer getInteger(String nm, int val) {
		//调用getInteger(nm,null);方法
        Integer result = getInteger(nm, null);
        return (result == null) ? Integer.valueOf(val) : result;
    }


	 /**
	  *返回Integer的值
	  *其他重写都是调用这个方法，
	  *nm为属性名，val的是包装类--(可以传空)
 	  */
    public static Integer getInteger(String nm, Integer val) {
        String v = null;
        try {
			//为null或者为“”抛异常
            v = System.getProperty(nm);
        } catch (IllegalArgumentException | NullPointerException e) {
        }
        if (v != null) {
            try {
				//
                return Integer.decode(v);
            } catch (NumberFormatException e) {
            }
        }
        return val;
    }

 
	 /**
	  *将1个字符串解码为1个整数。
      *接受给定的十进制，十六进制和8进制数字。
	  */
    public static Integer decode(String nm) throws NumberFormatException {
        int radix = 10;
        int index = 0;
        boolean negative = false;
        Integer result;
		//长度不能为0
        if (nm.length() == 0)
            throw new NumberFormatException("Zero length string");
        char firstChar = nm.charAt(0);
        //如果有标志，就进行处理。
        if (firstChar == '-') {
            negative = true;
            index++;
        } else if (firstChar == '+')
            index++;

        //如果有基数就进行处理。
		//进制数字符串开始16进制
        if (nm.startsWith("0x", index) || nm.startsWith("0X", index)) {
            index += 2;
            radix = 16;
        }
		//16进制
        else if (nm.startsWith("#", index)) {
            index ++;
            radix = 16;
        }
		//8进制
        else if (nm.startsWith("0", index) && nm.length() > 1 + index) {
            index ++;
            radix = 8;
        }
		//正负号。
        if (nm.startsWith("-", index) || nm.startsWith("+", index))
            throw new NumberFormatException("Sign character in wrong position");

        try {
            result = Integer.valueOf(nm.substring(index), radix);
            result = negative ? Integer.valueOf(-result.intValue()) : result;
        } catch (NumberFormatException e) {
            //如果数字是Integer.MIN_VALUE，我们将在这里结束。 下一行
             //处理这种情况，并导致任何真正的格式错误
             //重新安排
            String constant = negative ? ("-" + nm.substring(index))
                                       : nm.substring(index);
            result = Integer.valueOf(constant, radix);
        }
        return result;
    }

    /**
     * 比较器，实现的Comparable里的compareTo()方法
	 *1.2
     */
    public int compareTo(Integer anotherInteger) {
        return compare(this.value, anotherInteger.value);
    }

    /**
     *用于比较2个数的大小。
     * 真正的比较器。比较两个数大小。
     * @since 1.7
     */
    public static int compare(int x, int y) {
		//如果 x<y 返回-1，x=y返回0，x>y返回1;
        return (x < y) ? -1 : ((x == y) ? 0 : 1);
    }

	 /**
	  *比较两个无符号的2个数大小。
	  *@since 1.8
	  */
    public static int compareUnsigned(int x, int y) {
        return compare(x + MIN_VALUE, y + MIN_VALUE);
    }

	 /**
	  *将一个int格式（视为无符号）转化为无符号的Long.
	  *@since 1.8
	  */
    public static long toUnsignedLong(int x) {
		//低32位为1高32位为0；
        return ((long) x) & 0xffffffffL;
    }

    /**
     * 返回2个数无符号的商。
     * @since 1.8
     */
    public static int divideUnsigned(int dividend, int divisor) {
        // In lieu of tricky code, for now just use long arithmetic.
		//调用toUnsignedLong方法。
        return (int)(toUnsignedLong(dividend) / toUnsignedLong(divisor));
    }

    /**
     * 返回2个数无符号的取余的结果。
     * @since 1.8
     */
    public static int remainderUnsigned(int dividend, int divisor) {
        // In lieu of tricky code, for now just use long arithmetic.
		//调用toUnsignedLong方法。
        return (int)(toUnsignedLong(dividend) % toUnsignedLong(divisor));
    }


    // Bit twiddling

    /**
     * 表示二进制位数。
     * @since 1.5
     */
    @Native public static final int SIZE = 32;

    /**
     * 表示二进制的字节数。
     * complement binary form.
     *
     * @since 1.8
     */
    public static final int BYTES = SIZE / Byte.SIZE;

    /**
     * 返回最高位上第一次出现1的位置对应的十进制数
     * @since 1.5
     */
    public static int highestOneBit(int i) {
        // HD, Figure 3-1
        i |= (i >>  1);
        i |= (i >>  2);
        i |= (i >>  4);
        i |= (i >>  8);
        i |= (i >> 16);
        return i - (i >>> 1);
    }

    /**
     * 返回最低位第一次出现1的位置对应的十进制数。
     * @since 1.5
     */
    public static int lowestOneBit(int i) {
        // HD, Section 2-1
        return i & -i;
    }

    /**
     *返回数值32位有多少位为空的
     */
    @HotSpotIntrinsicCandidate
    public static int numberOfLeadingZeros(int i) {
        // HD, Figure 5-6
        if (i == 0)
            return 32;
        int n = 1;
        if (i >>> 16 == 0) { n += 16; i <<= 16; }
        if (i >>> 24 == 0) { n +=  8; i <<=  8; }
        if (i >>> 28 == 0) { n +=  4; i <<=  4; }
        if (i >>> 30 == 0) { n +=  2; i <<=  2; }
        n -= i >>> 31;
        return n;
    }

    /**
	 * 返回最低阶（“最右边”）后的0的位数。
     * @since 1.5
     */
    @HotSpotIntrinsicCandidate
    public static int numberOfTrailingZeros(int i) {
        // HD, Figure 5-14
        int y;
        if (i == 0) return 32;
        int n = 31;
        y = i <<16; if (y != 0) { n = n -16; i = y; }
        y = i << 8; if (y != 0) { n = n - 8; i = y; }
        y = i << 4; if (y != 0) { n = n - 4; i = y; }
        y = i << 2; if (y != 0) { n = n - 2; i = y; }
        return n - ((i << 1) >>> 31);
    }

    /**
     *返回二进制补码二进制中的1位数。 
     * @since 1.5
     */
    @HotSpotIntrinsicCandidate
    public static int bitCount(int i) {
        // HD, Figure 5-2
        i = i - ((i >>> 1) & 0x55555555);
        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
        i = (i + (i >>> 4)) & 0x0f0f0f0f;
        i = i + (i >>> 8);
        i = i + (i >>> 16);
        return i & 0x3f;
    }

    /**
     * 返回通过旋转二进制补码得到的值。
	 * 用左移。
     * @since 1.5
     */
    public static int rotateLeft(int i, int distance) {
        return (i << distance) | (i >>> -distance);
    }

    /**
     * 返回通过旋转二进制补码得到的值。
	 *用右移
     * @since 1.5
     */
    public static int rotateRight(int i, int distance) {
        return (i >>> distance) | (i << -distance);
    }

    /**
     * 返回通过反转位中的位顺序而获得的值。
     * @since 1.5
     */
    public static int reverse(int i) {
        // HD, Figure 7-1
        i = (i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
        i = (i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
        i = (i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;

        return reverseBytes(i);
    }

    /**
     *i是要计算其符号的值
     * @since 1.5
     */
    public static int signum(int i) {
        // HD, Section 2-7
        return (i >> 31) | (-i >>> 31);
    }

    /**
     *返回通过反转指定字节获得的值。
     * @since 1.5
     */
    @HotSpotIntrinsicCandidate
    public static int reverseBytes(int i) {
        return (i << 24)            |
               ((i & 0xff00) << 8)  |
               ((i >>> 8) & 0xff00) |
               (i >>> 24);
    }

    /**
     *返回2个数的和
     * @since 1.8
     */
    public static int sum(int a, int b) {
        return a + b;
    }

    /**
     *返回两个数中小的那1个。
     * @since 1.8
     */
    public static int max(int a, int b) {
        return Math.max(a, b);
    }

    /**
     *返回两个数中小的那1个。
     * @since 1.8
     */
    public static int min(int a, int b) {
        return Math.min(a, b);
    }

    /** 使用来自JDK 1.0.2的serialVersionUID来实现互操作性 */
    @Native private static final long serialVersionUID = 1360826667806852920L;
}
