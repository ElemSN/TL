Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
给定一个字符串，找出不含有重复字符的最长子串的长度。

示例：

给定 "abcabcbb" ，没有重复字符的最长子串是 "abc" ，那么长度就是3。

给定 "bbbbb" ，最长的子串就是 "b" ，长度是1。

给定 "pwwkew" ，最长子串是 "wke" ，长度是3。请注意答案必须是一个子串，"pwke" 是 子序列  而不是子串。
class Solution {
    public int lengthOfLongestSubstring(String s) {
        char []c=s.toCharArray();
        int max=0;
        int cnt=0;
        int i=0,j=0;
        Set<Character> set=new HashSet<Character>();
        for(;j<c.length;){
            int size=set.size();
            set.add(c[j]);
            if(size!=set.size()){
                j++;
                cnt++;
                max=max<cnt?cnt:max;
            }
            else{
                i=find(set,c,i,j);
                cnt=j-i;
            }
        }
        return max;
    }
    public int find(Set<Character> set,char[] c,int i,int j){
        int x;
        for(x=i;x<j&&c[x]!=c[j];x++){
           set.remove(c[x]);
        }
         set.remove(c[x]);
        return x+1;
    }
}