
给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> help=new ArrayList<List<Integer>> ();
        List<List<Integer>> res=new ArrayList<List<Integer>> ();
        List<Integer> mid=new ArrayList<Integer>();
        mid.add(0);
        help.add(mid);
        Arrays.sort(candidates);
        for(int i=0;i<candidates.length;++i){
            if(candidates[i]>target){
                break;
            }
            int len=help.size();
            List<Integer> med=new ArrayList<Integer>();
            int x=i-1;
            int sum=candidates[i];
            med.add(candidates[i]);
            while(x>-1&&candidates[x]==candidates[x+1]){
                med.add(candidates[x]);
                sum+=candidates[x];      
                   x--;
            }
            med.add(sum);
            for(int j=0;j<len;++j){
                mid=new ArrayList<Integer>(help.get(j));
                if(mid.size()>1&&mid.get(mid.size()-2)==med.get(0)){
                    continue ;
                }
                sum=mid.get(mid.size()-1)+med.get(med.size()-1);
                if(sum>target){
                    continue;
                }
                mid.remove(mid.size()-1);
                mid.addAll(med);
                mid.set(mid.size()-1,sum);
                help.add(mid);
                if(sum==target){
                    mid.remove(mid.size()-1);
                    List<Integer> re=new ArrayList<Integer>(mid);
                        res.add(re);
                    mid.add(sum);
                }
            }
        }
        return res;
    }
}